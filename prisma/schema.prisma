generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model classtocourse {
  A String
  B String

  @@unique([A, B], map: "_ClassToCourse_AB_unique")
  @@index([B], map: "_ClassToCourse_B_index")
  @@map("_classtocourse")
}

model attendance {
  id        String            @id @default(cuid())
  date      DateTime
  status    attendance_status
  studentId String
  student   student           @relation(fields: [studentId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String
  user      user              @relation(fields: [userId], references: [id])

  @@index([studentId])
  @@index([userId])
}

/// This model has been renamed to 'Renamedclass' during introspection, because the original name 'class' is reserved.
model Renamedclass {
  id        String       @id @default(cuid())
  name      String
  level     String
  year      Int
  teacherId String?
  teacher   teacher?     @relation(fields: [teacherId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  students  student[]
  schedule  schedule[]
  sessions  coursesession[]
  courses   course[]     @relation("ClassToCourse")

  @@map("class")
}

model course {
  id          String         @id @default(cuid())
  name        String
  description String?
  coefficient Float
  level       String
  teacherId   String
  teacher     teacher        @relation(fields: [teacherId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  grades      grade[]
  schedule    schedule[]
  sessions    coursesession[]
  classes     Renamedclass[] @relation("ClassToCourse")

  @@index([teacherId])
}

model coursesession {
  id        String               @id @default(cuid())
  date      DateTime
  startTime String
  endTime   String
  content   String?
  status    coursesession_status @default(PLANNED)
  classId   String
  class     Renamedclass         @relation(fields: [classId], references: [id])
  courseId  String
  course    course               @relation(fields: [courseId], references: [id])
  teacherId String
  teacher   teacher              @relation(fields: [teacherId], references: [id])
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@index([classId])
  @@index([courseId])
  @@index([teacherId])
}

model grade {
  id          String     @id @default(cuid())
  value       Float
  type        grade_type
  date        DateTime
  coefficient Float      @default(1)
  comment     String?
  studentId   String
  student     student    @relation(fields: [studentId], references: [id])
  courseId    String
  course      course     @relation(fields: [courseId], references: [id])
  teacherId   String
  teacher     teacher    @relation(fields: [teacherId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([courseId])
  @@index([studentId])
  @@index([teacherId])
}

model parent {
  id        String          @id @default(cuid())
  userId    String          @unique
  user      user            @relation(fields: [userId], references: [id], onDelete: Cascade)
  students  parentstudent[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model parentstudent {
  id        String   @id @default(cuid())
  parentId  String
  parent    parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  studentId String
  student   student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([parentId, studentId])
  @@index([parentId])
  @@index([studentId])
}

model period {
  id          String       @id @default(cuid())
  type        String
  startDate   DateTime
  endDate     DateTime
  schoolYear  String
  status      String
  reportCards reportcard[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model reportcard {
  id           String   @id @default(cuid())
  periodId     String
  period       period   @relation(fields: [periodId], references: [id])
  studentId    String
  student      student  @relation(fields: [studentId], references: [id])
  average      Float
  appreciation String?
  generatedAt  DateTime @default(now())
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([periodId])
  @@index([studentId])
}

model schedule {
  id         String       @id @default(cuid())
  classId    String
  class      Renamedclass @relation(fields: [classId], references: [id], onDelete: Cascade)
  courseId   String
  course     course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId     String
  user       user         @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeSlotId String
  timeslot   timeslot     @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  room       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([classId, timeSlotId])
  @@index([courseId])
  @@index([userId])
  @@index([timeSlotId])
}

model student {
  id          String          @id @default(cuid())
  userId      String          @unique
  user        user            @relation(fields: [userId], references: [id], onDelete: Cascade)
  classId     String?
  class       Renamedclass?   @relation(fields: [classId], references: [id])
  grades      grade[]
  reportCards reportcard[]
  attendances attendance[]
  parents     parentstudent[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([classId])
}

model teacher {
  id        String          @id @default(cuid())
  userId    String          @unique
  user      user            @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes   Renamedclass[]
  courses   course[]
  sessions  coursesession[]
  grades    grade[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model timeslot {
  id        String             @id @default(cuid())
  dayOfWeek timeslot_dayOfWeek
  startTime DateTime
  endTime   DateTime
  schedules schedule[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model user {
  id          String        @id @default(cuid())
  email       String        @unique
  password    String
  role        user_role     @default(STUDENT)
  firstName   String
  lastName    String
  student     student?
  parent      parent?
  teacher     teacher?
  attendances attendance[]
  schedules   schedule[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum timeslot_dayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum attendance_status {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum user_role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum coursesession_status {
  PLANNED
  ONGOING
  COMPLETED
  CANCELED
}

enum grade_type {
  HOMEWORK
  QUIZ
  EXAM
}
