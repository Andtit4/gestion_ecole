generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendance {
  id        String            @id @default(cuid())
  date      DateTime
  status    attendance_status
  studentId String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String
  student   student           @relation(fields: [studentId], references: [id])
  user      user              @relation(fields: [userId], references: [id])

  @@index([studentId])
  @@index([userId])
}

/// This model has been renamed to 'Renamedclass' during introspection, because the original name 'class' is reserved.
model Renamedclass {
  id        String     @id @default(cuid())
  name      String
  level     String
  year      Int
  teacherId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  teacher   teacher?   @relation(fields: [teacherId], references: [id])
  feegroup  feegroup[]
  schedule  schedule[]
  students  student[]
  course    course[]   @relation("classtocourse")

  @@index([teacherId], map: "class_teacherId_fkey")
  @@map("class")
}

model course {
  id           String         @id @default(cuid())
  name         String
  description  String?
  coefficient  Float
  level        String
  teacherId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  teacher      teacher        @relation(fields: [teacherId], references: [id])
  grades       grade[]
  programme    programme[]
  schedule     schedule[]
  Renamedclass Renamedclass[] @relation("classtocourse")

  @@index([teacherId])
}

model grade {
  id          String     @id @default(cuid())
  value       Float
  type        grade_type
  date        DateTime
  coefficient Float      @default(1)
  comment     String?
  studentId   String
  courseId    String
  teacherId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  course      course     @relation(fields: [courseId], references: [id])
  student     student    @relation(fields: [studentId], references: [id])
  teacher     teacher    @relation(fields: [teacherId], references: [id])

  @@index([courseId])
  @@index([studentId])
  @@index([teacherId])
}

model parent {
  id        String          @id @default(cuid())
  userId    String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      user            @relation(fields: [userId], references: [id], onDelete: Cascade)
  students  parentstudent[]
  payment   payment[]
}

model parentstudent {
  id        String   @id @default(cuid())
  parentId  String
  studentId String
  createdAt DateTime @default(now())
  parent    parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student   student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId])
  @@index([parentId])
  @@index([studentId])
}

model classroom {
  id          String   @id @default(cuid())
  name        String
  capacity    Int?
  floor       Int?
  building    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model period {
  id          String       @id @default(cuid())
  type        String
  startDate   DateTime
  endDate     DateTime
  schoolYear  String
  status      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reportCards reportcard[]
}

model reportcard {
  id              String        @id @default(cuid())
  periodId        String
  studentId       String
  average         Float
  appreciation    String?
  generatedAt     DateTime      @default(now())
  status          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  financialStatus FinanceStatus @default(PENDING)
  period          period        @relation(fields: [periodId], references: [id])
  student         student       @relation(fields: [studentId], references: [id])

  @@index([periodId])
  @@index([studentId])
}

model schedule {
  id         String       @id @default(cuid())
  classId    String
  courseId   String
  userId     String
  timeSlotId String
  room       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  class      Renamedclass @relation(fields: [classId], references: [id], onDelete: Cascade)
  course     course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  timeslot   timeslot     @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  user       user         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([userId])
  @@index([timeSlotId])
  @@index([classId])
}

model student {
  id            String          @id @default(cuid())
  userId        String          @unique
  classId       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  attendances   attendance[]
  feeassignment feeassignment[]
  grades        grade[]
  invoice       invoice[]
  parents       parentstudent[]
  reportCards   reportcard[]
  class         Renamedclass?   @relation(fields: [classId], references: [id])
  user          user            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([classId])
}

model teacher {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  classes   Renamedclass[]
  courses   course[]
  grades    grade[]
  user      user           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model timeslot {
  id        String             @id @default(cuid())
  dayOfWeek timeslot_dayOfWeek
  startTime DateTime
  endTime   DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  schedules schedule[]
}

model SchoolDayConfig {
  id             String             @id @default(cuid())
  dayOfWeek      timeslot_dayOfWeek @unique
  dayStartTime   DateTime
  dayEndTime     DateTime
  breakStartTime DateTime
  breakEndTime   DateTime
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("schoolday_config")
}

model user {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String
  role        user_role    @default(STUDENT)
  firstName   String
  lastName    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances attendance[]
  parent      parent?
  programme   programme[]
  schedules   schedule[]
  student     student?
  teacher     teacher?
}

model feeassignment {
  id                   String                 @id
  studentId            String
  feeItemId            String
  status               feeassignment_status   @default(PENDING)
  dueDate              DateTime
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  feeitem              feeitem                @relation(fields: [feeItemId], references: [id], map: "FeeAssignment_feeItemId_fkey")
  student              student                @relation(fields: [studentId], references: [id], map: "FeeAssignment_studentId_fkey")
  invoicefeeassignment invoicefeeassignment[]

  @@index([feeItemId], map: "FeeAssignment_feeItemId_idx")
  @@index([studentId], map: "FeeAssignment_studentId_idx")
}

model feegroup {
  id           String        @id
  name         String
  description  String?
  classId      String?
  level        String?
  year         Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  Renamedclass Renamedclass? @relation(fields: [classId], references: [id], map: "FeeGroup_classId_fkey")
  feeitem      feeitem[]

  @@index([classId], map: "FeeGroup_classId_idx")
}

model feeitem {
  id            String          @id
  name          String
  amount        Float
  dueDate       DateTime?
  description   String?
  mandatory     Boolean         @default(true)
  feeTypeId     String
  feeGroupId    String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  feeassignment feeassignment[]
  feegroup      feegroup        @relation(fields: [feeGroupId], references: [id], map: "FeeItem_feeGroupId_fkey")
  feetype       feetype         @relation(fields: [feeTypeId], references: [id], map: "FeeItem_feeTypeId_fkey")

  @@index([feeGroupId], map: "FeeItem_feeGroupId_idx")
  @@index([feeTypeId], map: "FeeItem_feeTypeId_idx")
}

model feetype {
  id          String             @id @default(cuid())
  name        String
  description String?
  isRecurrent Boolean            @default(false)
  frequency   feetype_frequency?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  feeitem     feeitem[]
}

model invoice {
  id                   String                 @id
  invoiceNumber        String                 @unique(map: "Invoice_invoiceNumber_key")
  totalAmount          Float
  paidAmount           Float                  @default(0)
  status               invoice_status         @default(PENDING)
  dueDate              DateTime
  studentId            String
  issuedDate           DateTime               @default(now())
  notes                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  student              student                @relation(fields: [studentId], references: [id], map: "Invoice_studentId_fkey")
  invoicefeeassignment invoicefeeassignment[]
  payment              payment[]

  @@index([studentId], map: "Invoice_studentId_idx")
}

model invoicefeeassignment {
  id              String        @id
  invoiceId       String
  feeAssignmentId String
  amount          Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  feeassignment   feeassignment @relation(fields: [feeAssignmentId], references: [id], map: "InvoiceFeeAssignment_feeAssignmentId_fkey")
  invoice         invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade, map: "InvoiceFeeAssignment_invoiceId_fkey")

  @@unique([invoiceId, feeAssignmentId], map: "InvoiceFeeAssignment_invoiceId_feeAssignmentId_key")
  @@index([feeAssignmentId], map: "InvoiceFeeAssignment_feeAssignmentId_idx")
  @@index([invoiceId], map: "InvoiceFeeAssignment_invoiceId_idx")
}

model payment {
  id            String         @id
  amount        Float
  method        payment_method
  reference     String?
  status        payment_status @default(PENDING)
  processingFee Float          @default(0)
  invoiceId     String
  parentId      String
  paymentDate   DateTime       @default(now())
  notes         String?
  receiptNumber String?        @unique(map: "Payment_receiptNumber_key")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  invoice       invoice        @relation(fields: [invoiceId], references: [id], map: "Payment_invoiceId_fkey")
  parent        parent         @relation(fields: [parentId], references: [id], map: "Payment_parentId_fkey")

  @@index([invoiceId], map: "Payment_invoiceId_idx")
  @@index([parentId], map: "Payment_parentId_idx")
}

model paymentconfig {
  id                     String   @id
  latePaymentFeePercent  Float    @default(0)
  latePaymentGracePeriod Int      @default(0)
  receiptPrefix          String   @default("RECU-")
  invoicePrefix          String   @default("FACT-")
  allowPartialPayments   Boolean  @default(true)
  allowOnlinePayments    Boolean  @default(true)
  paymentMethods         String   @default("CASH,CHEQUE,BANK_TRANSFER,ONLINE")
  createdAt              DateTime @default(now())
  updatedAt              DateTime
}

model programme {
  id          String           @id
  title       String
  description String?
  level       String
  year        Int
  courseId    String
  content     String?          @db.Text
  objectives  String?          @db.Text
  status      programme_status @default(DRAFT)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime
  userId      String
  course      course           @relation(fields: [courseId], references: [id], map: "Programme_courseId_fkey")
  user        user             @relation(fields: [userId], references: [id], map: "Programme_userId_fkey")

  @@index([courseId], map: "Programme_courseId_idx")
  @@index([userId], map: "Programme_userId_idx")
}

enum timeslot_dayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum attendance_status {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum user_role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum grade_type {
  HOMEWORK
  QUIZ
  EXAM
}

enum FinanceStatus {
  PENDING
  PAID
  LATE
  EXEMPTED
}

enum payment_method {
  CASH
  CHEQUE
  BANK_TRANSFER
  ONLINE
  MOBILE_MONEY
  OTHER
}

enum feeassignment_status {
  PENDING
  PAID
  PARTIAL
  LATE
  CANCELLED
  REFUNDED
}

enum feetype_frequency {
  ONCE
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
}

enum invoice_status {
  PENDING
  PAID
  PARTIAL
  LATE
  CANCELLED
  REFUNDED
}

enum payment_status {
  PENDING
  PAID
  PARTIAL
  LATE
  CANCELLED
  REFUNDED
}

enum programme_status {
  DRAFT
  PUBLISHED
  ARCHIVED
}
