'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { AlertCircle, CheckCircle2 } from 'lucide-react'

export default function AdminPage() {
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState<{ success: boolean; message: string } | null>(null)

  const createTestPeriod = async () => {
    setLoading(true)
    setResult(null)
    try {
      const response = await fetch('/api/periods', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'TRIMESTER',
          startDate: new Date('2023-09-01').toISOString(),
          endDate: new Date('2023-12-20').toISOString(),
          schoolYear: '2023-2024',
          status: 'ACTIVE'
        })
      })

      if (response.ok) {
        setResult({
          success: true,
          message: 'Période de test créée avec succès'
        })
      } else {
        const data = await response.json()
        throw new Error(data.error || 'Une erreur est survenue')
      }
    } catch (error) {
      console.error('Erreur:', error)
      setResult({
        success: false,
        message: error instanceof Error ? error.message : 'Une erreur est survenue'
      })
    } finally {
      setLoading(false)
    }
  }

  const createTestStudent = async () => {
    setLoading(true)
    setResult(null)
    try {
      const response = await fetch('/api/students', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          firstName: 'Élève',
          lastName: 'Test',
          email: 'eleve.test@ecole.com',
          password: 'motdepasse',
        })
      })

      if (response.ok) {
        setResult({
          success: true,
          message: 'Élève de test créé avec succès'
        })
      } else {
        const data = await response.json()
        throw new Error(data.error || 'Une erreur est survenue')
      }
    } catch (error) {
      console.error('Erreur:', error)
      setResult({
        success: false,
        message: error instanceof Error ? error.message : 'Une erreur est survenue'
      })
    } finally {
      setLoading(false)
    }
  }

  const createTestClass = async () => {
    setLoading(true)
    setResult(null)
    try {
      const response = await fetch('/api/classes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: 'Classe Test',
          level: 'CM2',
          year: 2023
        })
      })

      if (response.ok) {
        setResult({
          success: true,
          message: 'Classe de test créée avec succès'
        })
      } else {
        const data = await response.json()
        throw new Error(data.error || 'Une erreur est survenue')
      }
    } catch (error) {
      console.error('Erreur:', error)
      setResult({
        success: false,
        message: error instanceof Error ? error.message : 'Une erreur est survenue'
      })
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">Administration</h1>

      {result && (
        <div className={`p-4 mb-6 border rounded-md flex items-center gap-3 ${result.success ? 'bg-green-50 border-green-200 text-green-700' : 'bg-red-50 border-red-200 text-red-700'}`}>
          {result.success ? <CheckCircle2 size={20} /> : <AlertCircle size={20} />}
          <p>{result.message}</p>
        </div>
      )}

      <Tabs defaultValue="test-data">
        <TabsList>
          <TabsTrigger value="test-data">Données de test</TabsTrigger>
        </TabsList>
        <TabsContent value="test-data" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Création de données de test</CardTitle>
              <CardDescription>
                Utilisez ces boutons pour créer rapidement des données de test pour le développement
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="text-lg font-medium mb-2">Périodes</h3>
                <Button onClick={createTestPeriod} disabled={loading}>
                  {loading ? "Création en cours..." : "Créer une période de test"}
                </Button>
              </div>
              
              <div>
                <h3 className="text-lg font-medium mb-2">Élèves</h3>
                <Button onClick={createTestStudent} disabled={loading}>
                  {loading ? "Création en cours..." : "Créer un élève de test"}
                </Button>
              </div>
              
              <div>
                <h3 className="text-lg font-medium mb-2">Classes</h3>
                <Button onClick={createTestClass} disabled={loading}>
                  {loading ? "Création en cours..." : "Créer une classe de test"}
                </Button>
              </div>
            </CardContent>
            <CardFooter>
              <p className="text-sm text-gray-500">
                Les données créées ici sont destinées uniquement au développement et aux tests.
              </p>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
} 


